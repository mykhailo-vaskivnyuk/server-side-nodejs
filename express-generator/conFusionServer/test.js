// logout
// URLSearchParams.register().then()

const dish = `{
	"name": "Uthappizza",
    "image": "images/uthappizza.png",
    "category": "mains",
    "label": "Hot",
    "price": "4.99",
    "featured": "true",
    "description": "A unique combination of Indian Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer."
}`;

const user = `{
	"firstname" : "Mykhailo",
	"lastname"	: "Vaskivnyuk",
	"username"	: "admin",
	"password"	: "password"
}`;

const user_login = `{
	"username"	: "admin",
	"password"	: "password"
}`;

const comment = `{
	"rating": 5,
	"comment": "Imagine all the eatables, living in conFusion!"
}`;

const dich = `5e82364da9a77f1f70d998d7`;
const comment = `5e8236fea9a77f1f70d998d8`;
const name_1 = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTgwYTE4YzdhODMxMzFjZDQ0ODI0MzgiLCJpYXQiOjE1ODU1OTU3MzYsImV4cCI6MTU4NTU5OTMzNn0.GSRWwsS1pBaR96pVfEHaTFq4KkgU77nunPPX9jXseXQ`;
const name_2 = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTgwYTE5ZjdhODMxMzFjZDQ0ODI0MzkiLCJpYXQiOjE1ODU1OTU3NTcsImV4cCI6MTU4NTU5OTM1N30.6yRQOmmbQwiL1KKLzsnBgy6x5a4iVzbcQE6a2DNVykA`;
const admin = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTdlNzNjMDE1MGJlZTBkYTQyNTE2YjMiLCJpYXQiOjE1ODU1OTU3MDIsImV4cCI6MTU4NTU5OTMwMn0.FJOwQsJopiSAjxxNeweh9UoiWFpiQf2HIBVltZ5NlHU`;

`IncomingMessage {
	_readableState: ReadableState {
	  objectMode: false,
	  highWaterMark: 16384,
	  buffer: BufferList { head: null, tail: null, length: 0 },
	  length: 0,
	  pipes: null,
	  pipesCount: 0,
	  flowing: null,
	  ended: true,
	  endEmitted: false,
	  reading: false,
	  sync: true,
	  needReadable: false,
	  emittedReadable: false,
	  readableListening: false,
	  resumeScheduled: false,
	  emitClose: true,
	  autoDestroy: false,
	  destroyed: false,
	  defaultEncoding: 'utf8',
	  awaitDrain: 0,
	  readingMore: true,
	  decoder: null,
	  encoding: null,
	  [Symbol(kPaused)]: null
	},
	readable: true,
	_events: [Object: null prototype] {
	  end: [Function: resetHeadersTimeoutOnReqEnd]
	},
	_eventsCount: 1,
	_maxListeners: undefined,
	socket: Socket {
	  connecting: false,
	  _hadError: false,
	  _parent: null,
	  _host: null,
	  _readableState: ReadableState {
		objectMode: false,
		highWaterMark: 16384,
		buffer: BufferList { head: null, tail: null, length: 0 },
		length: 0,
		pipes: null,
		pipesCount: 0,
		flowing: true,
		ended: false,
		endEmitted: false,
		reading: true,
		sync: false,
		needReadable: true,
		emittedReadable: false,
		readableListening: false,
		resumeScheduled: false,
		emitClose: false,
		autoDestroy: false,
		destroyed: false,
		defaultEncoding: 'utf8',
		awaitDrain: 0,
		readingMore: false,
		decoder: null,
		encoding: null,
		[Symbol(kPaused)]: false
	  },
	  readable: true,
	  _events: [Object: null prototype] {
		end: [Array],
		timeout: [Function: socketOnTimeout],
		data: [Function: bound socketOnData],
		error: [Array],
		close: [Array],
		drain: [Function: bound socketOnDrain],
		resume: [Function: onSocketResume],
		pause: [Function: onSocketPause]
	  },
	  _eventsCount: 8,
	  _maxListeners: undefined,
	  _writableState: WritableState {
		objectMode: false,
		highWaterMark: 16384,
		finalCalled: false,
		needDrain: false,
		ending: false,
		ended: false,
		finished: false,
		destroyed: false,
		decodeStrings: false,
		defaultEncoding: 'utf8',
		length: 0,
		writing: false,
		corked: 0,
		sync: false,
		bufferProcessing: false,
		onwrite: [Function: bound onwrite],
		writecb: null,
		writelen: 0,
		afterWriteTickInfo: [Object],
		bufferedRequest: null,
		lastBufferedRequest: null,
		pendingcb: 3,
		prefinished: false,
		errorEmitted: false,
		emitClose: false,
		autoDestroy: false,
		bufferedRequestCount: 0,
		corkedRequestsFree: [Object]
	  },
	  writable: true,
	  allowHalfOpen: true,
	  _sockname: null,
	  _pendingData: null,
	  _pendingEncoding: '',
	  server: Server {
		insecureHTTPParser: undefined,
		_events: [Object: null prototype],
		_eventsCount: 4,
		_maxListeners: undefined,
		_connections: 1,
		_handle: [TCP],
		_usingWorkers: false,
		_workers: [],
		_unref: false,
		allowHalfOpen: true,
		pauseOnConnect: false,
		httpAllowHalfOpen: false,
		timeout: 120000,
		keepAliveTimeout: 5000,
		maxHeadersCount: null,
		headersTimeout: 40000,
		_connectionKey: '6::::3000',
		[Symbol(IncomingMessage)]: [Function: IncomingMessage],
		[Symbol(ServerResponse)]: [Function: ServerResponse],
		[Symbol(kCapture)]: false,
		[Symbol(asyncId)]: 16
	  },
	  _server: Server {
		insecureHTTPParser: undefined,
		_events: [Object: null prototype],
		_eventsCount: 4,
		_maxListeners: undefined,
		_connections: 1,
		_handle: [TCP],
		_usingWorkers: false,
		_workers: [],
		_unref: false,
		allowHalfOpen: true,
		pauseOnConnect: false,
		httpAllowHalfOpen: false,
		timeout: 120000,
		keepAliveTimeout: 5000,
		maxHeadersCount: null,
		headersTimeout: 40000,
		_connectionKey: '6::::3000',
		[Symbol(IncomingMessage)]: [Function: IncomingMessage],
		[Symbol(ServerResponse)]: [Function: ServerResponse],
		[Symbol(kCapture)]: false,
		[Symbol(asyncId)]: 16
	  },
	  timeout: 120000,
	  parser: HTTPParser {
		'0': [Function: parserOnHeaders],
		'1': [Function: parserOnHeadersComplete],
		'2': [Function: parserOnBody],
		'3': [Function: parserOnMessageComplete],
		'4': [Function: bound onParserExecute],
		_headers: [],
		_url: '',
		socket: [Circular],
		incoming: [Circular],
		outgoing: null,
		maxHeaderPairs: 2000,
		_consumed: true,
		onIncoming: [Function: bound parserOnIncoming],
		parsingHeadersStart: 0
	  },
	  on: [Function: socketListenerWrap],
	  addListener: [Function: socketListenerWrap],
	  prependListener: [Function: socketListenerWrap],
	  _paused: false,
	  _httpMessage: ServerResponse {
		_events: [Object: null prototype],
		_eventsCount: 2,
		_maxListeners: undefined,
		outputData: [],
		outputSize: 0,
		writable: true,
		_last: false,
		chunkedEncoding: false,
		shouldKeepAlive: true,
		useChunkedEncodingByDefault: true,
		sendDate: true,
		_removedConnection: false,
		_removedContLen: false,
		_removedTE: false,
		_contentLength: 12,
		_hasBody: true,
		_trailer: '',
		finished: true,
		_headerSent: true,
		socket: [Circular],
		connection: [Circular],
		_header: 'HTTP/1.1 401 Unauthorized\r\n' +
		  'X-Powered-By: Express\r\n' +
		  'Date: Sun, 29 Mar 2020 11:22:02 GMT\r\n' +
		  'Connection: keep-alive\r\n' +
		  'Content-Length: 12\r\n' +
		  '\r\n',
		_onPendingData: [Function: bound updateOutgoingData],
		_sent100: false,
		_expect_continue: false,
		req: [Circular],
		locals: [Object: null prototype] {},
		_startAt: [Array],
		_startTime: 2020-03-29T11:22:02.256Z,
		writeHead: [Function: writeHead],
		__onFinished: [Function],
		statusCode: 401,
		statusMessage: 'Unauthorized',
		[Symbol(kCapture)]: false,
		[Symbol(kNeedDrain)]: false,
		[Symbol(corked)]: 0,
		[Symbol(kOutHeaders)]: [Object: null prototype]
	  },
	  _peername: { address: '::1', family: 'IPv6', port: 56246 },
	  [Symbol(asyncId)]: 63,
	  [Symbol(kHandle)]: TCP {
		reading: true,
		onconnection: null,
		_consumed: true,
		[Symbol(owner)]: [Circular]
	  },
	  [Symbol(lastWriteQueueSize)]: 0,
	  [Symbol(timeout)]: Timeout {
		_idleTimeout: 120000,
		_idlePrev: [TimersList],
		_idleNext: [TimersList],
		_idleStart: 8575,
		_onTimeout: [Function: bound ],
		_timerArgs: undefined,
		_repeat: null,
		_destroyed: false,
		[Symbol(refed)]: false,
		[Symbol(asyncId)]: 64,
		[Symbol(triggerId)]: 63
	  },
	  [Symbol(kBuffer)]: null,
	  [Symbol(kBufferCb)]: null,
	  [Symbol(kBufferGen)]: null,
	  [Symbol(kCapture)]: false,
	  [Symbol(kBytesRead)]: 0,
	  [Symbol(kBytesWritten)]: 0
	},
	connection: Socket {
	  connecting: false,
	  _hadError: false,
	  _parent: null,
	  _host: null,
	  _readableState: ReadableState {
		objectMode: false,
		highWaterMark: 16384,
		buffer: BufferList { head: null, tail: null, length: 0 },
		length: 0,
		pipes: null,
		pipesCount: 0,
		flowing: true,
		ended: false,
		endEmitted: false,
		reading: true,
		sync: false,
		needReadable: true,
		emittedReadable: false,
		readableListening: false,
		resumeScheduled: false,
		emitClose: false,
		autoDestroy: false,
		destroyed: false,
		defaultEncoding: 'utf8',
		awaitDrain: 0,
		readingMore: false,
		decoder: null,
		encoding: null,
		[Symbol(kPaused)]: false
	  },
	  readable: true,
	  _events: [Object: null prototype] {
		end: [Array],
		timeout: [Function: socketOnTimeout],
		data: [Function: bound socketOnData],
		error: [Array],
		close: [Array],
		drain: [Function: bound socketOnDrain],
		resume: [Function: onSocketResume],
		pause: [Function: onSocketPause]
	  },
	  _eventsCount: 8,
	  _maxListeners: undefined,
	  _writableState: WritableState {
		objectMode: false,
		highWaterMark: 16384,
		finalCalled: false,
		needDrain: false,
		ending: false,
		ended: false,
		finished: false,
		destroyed: false,
		decodeStrings: false,
		defaultEncoding: 'utf8',
		length: 0,
		writing: false,
		corked: 0,
		sync: false,
		bufferProcessing: false,
		onwrite: [Function: bound onwrite],
		writecb: null,
		writelen: 0,
		afterWriteTickInfo: [Object],
		bufferedRequest: null,
		lastBufferedRequest: null,
		pendingcb: 3,
		prefinished: false,
		errorEmitted: false,
		emitClose: false,
		autoDestroy: false,
		bufferedRequestCount: 0,
		corkedRequestsFree: [Object]
	  },
	  writable: true,
	  allowHalfOpen: true,
	  _sockname: null,
	  _pendingData: null,
	  _pendingEncoding: '',
	  server: Server {
		insecureHTTPParser: undefined,
		_events: [Object: null prototype],
		_eventsCount: 4,
		_maxListeners: undefined,
		_connections: 1,
		_handle: [TCP],
		_usingWorkers: false,
		_workers: [],
		_unref: false,
		allowHalfOpen: true,
		pauseOnConnect: false,
		httpAllowHalfOpen: false,
		timeout: 120000,
		keepAliveTimeout: 5000,
		maxHeadersCount: null,
		headersTimeout: 40000,
		_connectionKey: '6::::3000',
		[Symbol(IncomingMessage)]: [Function: IncomingMessage],
		[Symbol(ServerResponse)]: [Function: ServerResponse],
		[Symbol(kCapture)]: false,
		[Symbol(asyncId)]: 16
	  },
	  _server: Server {
		insecureHTTPParser: undefined,
		_events: [Object: null prototype],
		_eventsCount: 4,
		_maxListeners: undefined,
		_connections: 1,
		_handle: [TCP],
		_usingWorkers: false,
		_workers: [],
		_unref: false,
		allowHalfOpen: true,
		pauseOnConnect: false,
		httpAllowHalfOpen: false,
		timeout: 120000,
		keepAliveTimeout: 5000,
		maxHeadersCount: null,
		headersTimeout: 40000,
		_connectionKey: '6::::3000',
		[Symbol(IncomingMessage)]: [Function: IncomingMessage],
		[Symbol(ServerResponse)]: [Function: ServerResponse],
		[Symbol(kCapture)]: false,
		[Symbol(asyncId)]: 16
	  },
	  timeout: 120000,
	  parser: HTTPParser {
		'0': [Function: parserOnHeaders],
		'1': [Function: parserOnHeadersComplete],
		'2': [Function: parserOnBody],
		'3': [Function: parserOnMessageComplete],
		'4': [Function: bound onParserExecute],
		_headers: [],
		_url: '',
		socket: [Circular],
		incoming: [Circular],
		outgoing: null,
		maxHeaderPairs: 2000,
		_consumed: true,
		onIncoming: [Function: bound parserOnIncoming],
		parsingHeadersStart: 0
	  },
	  on: [Function: socketListenerWrap],
	  addListener: [Function: socketListenerWrap],
	  prependListener: [Function: socketListenerWrap],
	  _paused: false,
	  _httpMessage: ServerResponse {
		_events: [Object: null prototype],
		_eventsCount: 2,
		_maxListeners: undefined,
		outputData: [],
		outputSize: 0,
		writable: true,
		_last: false,
		chunkedEncoding: false,
		shouldKeepAlive: true,
		useChunkedEncodingByDefault: true,
		sendDate: true,
		_removedConnection: false,
		_removedContLen: false,
		_removedTE: false,
		_contentLength: 12,
		_hasBody: true,
		_trailer: '',
		finished: true,
		_headerSent: true,
		socket: [Circular],
		connection: [Circular],
		_header: 'HTTP/1.1 401 Unauthorized\r\n' +
		  'X-Powered-By: Express\r\n' +
		  'Date: Sun, 29 Mar 2020 11:22:02 GMT\r\n' +
		  'Connection: keep-alive\r\n' +
		  'Content-Length: 12\r\n' +
		  '\r\n',
		_onPendingData: [Function: bound updateOutgoingData],
		_sent100: false,
		_expect_continue: false,
		req: [Circular],
		locals: [Object: null prototype] {},
		_startAt: [Array],
		_startTime: 2020-03-29T11:22:02.256Z,
		writeHead: [Function: writeHead],
		__onFinished: [Function],
		statusCode: 401,
		statusMessage: 'Unauthorized',
		[Symbol(kCapture)]: false,
		[Symbol(kNeedDrain)]: false,
		[Symbol(corked)]: 0,
		[Symbol(kOutHeaders)]: [Object: null prototype]
	  },
	  _peername: { address: '::1', family: 'IPv6', port: 56246 },
	  [Symbol(asyncId)]: 63,
	  [Symbol(kHandle)]: TCP {
		reading: true,
		onconnection: null,
		_consumed: true,
		[Symbol(owner)]: [Circular]
	  },
	  [Symbol(lastWriteQueueSize)]: 0,
	  [Symbol(timeout)]: Timeout {
		_idleTimeout: 120000,
		_idlePrev: [TimersList],
		_idleNext: [TimersList],
		_idleStart: 8575,
		_onTimeout: [Function: bound ],
		_timerArgs: undefined,
		_repeat: null,
		_destroyed: false,
		[Symbol(refed)]: false,
		[Symbol(asyncId)]: 64,
		[Symbol(triggerId)]: 63
	  },
	  [Symbol(kBuffer)]: null,
	  [Symbol(kBufferCb)]: null,
	  [Symbol(kBufferGen)]: null,
	  [Symbol(kCapture)]: false,
	  [Symbol(kBytesRead)]: 0,
	  [Symbol(kBytesWritten)]: 0
	},
	httpVersionMajor: 1,
	httpVersionMinor: 1,
	httpVersion: '1.1',
	complete: true,
	headers: {
	  'user-agent': 'PostmanRuntime/7.24.0',
	  accept: '*/*',
	  'cache-control': 'no-cache',
	  'postman-token': 'f4e80b2a-2dde-4806-9ad5-917feb134a52',
	  host: 'localhost:3000',
	  'accept-encoding': 'gzip, deflate, br',
	  connection: 'keep-alive'
	},
	rawHeaders: [
	  'User-Agent',
	  'PostmanRuntime/7.24.0',
	  'Accept',
	  '*/*',
	  'Cache-Control',
	  'no-cache',
	  'Postman-Token',
	  'f4e80b2a-2dde-4806-9ad5-917feb134a52',
	  'Host',
	  'localhost:3000',
	  'Accept-Encoding',
	  'gzip, deflate, br',
	  'Connection',
	  'keep-alive'
	],
	trailers: {},
	rawTrailers: [],
	aborted: false,
	upgrade: false,
	url: '/',
	method: 'GET',
	statusCode: null,
	statusMessage: null,
	client: Socket {
	  connecting: false,
	  _hadError: false,
	  _parent: null,
	  _host: null,
	  _readableState: ReadableState {
		objectMode: false,
		highWaterMark: 16384,
		buffer: BufferList { head: null, tail: null, length: 0 },
		length: 0,
		pipes: null,
		pipesCount: 0,
		flowing: true,
		ended: false,
		endEmitted: false,
		reading: true,
		sync: false,
		needReadable: true,
		emittedReadable: false,
		readableListening: false,
		resumeScheduled: false,
		emitClose: false,
		autoDestroy: false,
		destroyed: false,
		defaultEncoding: 'utf8',
		awaitDrain: 0,
		readingMore: false,
		decoder: null,
		encoding: null,
		[Symbol(kPaused)]: false
	  },
	  readable: true,
	  _events: [Object: null prototype] {
		end: [Array],
		timeout: [Function: socketOnTimeout],
		data: [Function: bound socketOnData],
		error: [Array],
		close: [Array],
		drain: [Function: bound socketOnDrain],
		resume: [Function: onSocketResume],
		pause: [Function: onSocketPause]
	  },
	  _eventsCount: 8,
	  _maxListeners: undefined,
	  _writableState: WritableState {
		objectMode: false,
		highWaterMark: 16384,
		finalCalled: false,
		needDrain: false,
		ending: false,
		ended: false,
		finished: false,
		destroyed: false,
		decodeStrings: false,
		defaultEncoding: 'utf8',
		length: 0,
		writing: false,
		corked: 0,
		sync: false,
		bufferProcessing: false,
		onwrite: [Function: bound onwrite],
		writecb: null,
		writelen: 0,
		afterWriteTickInfo: [Object],
		bufferedRequest: null,
		lastBufferedRequest: null,
		pendingcb: 3,
		prefinished: false,
		errorEmitted: false,
		emitClose: false,
		autoDestroy: false,
		bufferedRequestCount: 0,
		corkedRequestsFree: [Object]
	  },
	  writable: true,
	  allowHalfOpen: true,
	  _sockname: null,
	  _pendingData: null,
	  _pendingEncoding: '',
	  server: Server {
		insecureHTTPParser: undefined,
		_events: [Object: null prototype],
		_eventsCount: 4,
		_maxListeners: undefined,
		_connections: 1,
		_handle: [TCP],
		_usingWorkers: false,
		_workers: [],
		_unref: false,
		allowHalfOpen: true,
		pauseOnConnect: false,
		httpAllowHalfOpen: false,
		timeout: 120000,
		keepAliveTimeout: 5000,
		maxHeadersCount: null,
		headersTimeout: 40000,
		_connectionKey: '6::::3000',
		[Symbol(IncomingMessage)]: [Function: IncomingMessage],
		[Symbol(ServerResponse)]: [Function: ServerResponse],
		[Symbol(kCapture)]: false,
		[Symbol(asyncId)]: 16
	  },
	  _server: Server {
		insecureHTTPParser: undefined,
		_events: [Object: null prototype],
		_eventsCount: 4,
		_maxListeners: undefined,
		_connections: 1,
		_handle: [TCP],
		_usingWorkers: false,
		_workers: [],
		_unref: false,
		allowHalfOpen: true,
		pauseOnConnect: false,
		httpAllowHalfOpen: false,
		timeout: 120000,
		keepAliveTimeout: 5000,
		maxHeadersCount: null,
		headersTimeout: 40000,
		_connectionKey: '6::::3000',
		[Symbol(IncomingMessage)]: [Function: IncomingMessage],
		[Symbol(ServerResponse)]: [Function: ServerResponse],
		[Symbol(kCapture)]: false,
		[Symbol(asyncId)]: 16
	  },
	  timeout: 120000,
	  parser: HTTPParser {
		'0': [Function: parserOnHeaders],
		'1': [Function: parserOnHeadersComplete],
		'2': [Function: parserOnBody],
		'3': [Function: parserOnMessageComplete],
		'4': [Function: bound onParserExecute],
		_headers: [],
		_url: '',
		socket: [Circular],
		incoming: [Circular],
		outgoing: null,
		maxHeaderPairs: 2000,
		_consumed: true,
		onIncoming: [Function: bound parserOnIncoming],
		parsingHeadersStart: 0
	  },
	  on: [Function: socketListenerWrap],
	  addListener: [Function: socketListenerWrap],
	  prependListener: [Function: socketListenerWrap],
	  _paused: false,
	  _httpMessage: ServerResponse {
		_events: [Object: null prototype],
		_eventsCount: 2,
		_maxListeners: undefined,
		outputData: [],
		outputSize: 0,
		writable: true,
		_last: false,
		chunkedEncoding: false,
		shouldKeepAlive: true,
		useChunkedEncodingByDefault: true,
		sendDate: true,
		_removedConnection: false,
		_removedContLen: false,
		_removedTE: false,
		_contentLength: 12,
		_hasBody: true,
		_trailer: '',
		finished: true,
		_headerSent: true,
		socket: [Circular],
		connection: [Circular],
		_header: 'HTTP/1.1 401 Unauthorized\r\n' +
		  'X-Powered-By: Express\r\n' +
		  'Date: Sun, 29 Mar 2020 11:22:02 GMT\r\n' +
		  'Connection: keep-alive\r\n' +
		  'Content-Length: 12\r\n' +
		  '\r\n',
		_onPendingData: [Function: bound updateOutgoingData],
		_sent100: false,
		_expect_continue: false,
		req: [Circular],
		locals: [Object: null prototype] {},
		_startAt: [Array],
		_startTime: 2020-03-29T11:22:02.256Z,
		writeHead: [Function: writeHead],
		__onFinished: [Function],
		statusCode: 401,
		statusMessage: 'Unauthorized',
		[Symbol(kCapture)]: false,
		[Symbol(kNeedDrain)]: false,
		[Symbol(corked)]: 0,
		[Symbol(kOutHeaders)]: [Object: null prototype]
	  },
	  _peername: { address: '::1', family: 'IPv6', port: 56246 },
	  [Symbol(asyncId)]: 63,
	  [Symbol(kHandle)]: TCP {
		reading: true,
		onconnection: null,
		_consumed: true,
		[Symbol(owner)]: [Circular]
	  },
	  [Symbol(lastWriteQueueSize)]: 0,
	  [Symbol(timeout)]: Timeout {
		_idleTimeout: 120000,
		_idlePrev: [TimersList],
		_idleNext: [TimersList],
		_idleStart: 8575,
		_onTimeout: [Function: bound ],
		_timerArgs: undefined,
		_repeat: null,
		_destroyed: false,
		[Symbol(refed)]: false,
		[Symbol(asyncId)]: 64,
		[Symbol(triggerId)]: 63
	  },
	  [Symbol(kBuffer)]: null,
	  [Symbol(kBufferCb)]: null,
	  [Symbol(kBufferGen)]: null,
	  [Symbol(kCapture)]: false,
	  [Symbol(kBytesRead)]: 0,
	  [Symbol(kBytesWritten)]: 0
	},
	_consuming: false,
	_dumped: false,
	next: [Function: next],
	baseUrl: '/dishes',
	originalUrl: '/dishes',
	_parsedUrl: Url {
	  protocol: null,
	  slashes: null,
	  auth: null,
	  host: null,
	  port: null,
	  hostname: null,
	  hash: null,
	  search: null,
	  query: null,
	  pathname: '/',
	  path: '/',
	  href: '/',
	  _raw: '/'
	},
	params: {},
	query: {},
	res: ServerResponse {
	  _events: [Object: null prototype] {
		finish: [Array],
		end: [Function: onevent]
	  },
	  _eventsCount: 2,
	  _maxListeners: undefined,
	  outputData: [],
	  outputSize: 0,
	  writable: true,
	  _last: false,
	  chunkedEncoding: false,
	  shouldKeepAlive: true,
	  useChunkedEncodingByDefault: true,
	  sendDate: true,
	  _removedConnection: false,
	  _removedContLen: false,
	  _removedTE: false,
	  _contentLength: 12,
	  _hasBody: true,
	  _trailer: '',
	  finished: true,
	  _headerSent: true,
	  socket: Socket {
		connecting: false,
		_hadError: false,
		_parent: null,
		_host: null,
		_readableState: [ReadableState],
		readable: true,
		_events: [Object: null prototype],
		_eventsCount: 8,
		_maxListeners: undefined,
		_writableState: [WritableState],
		writable: true,
		allowHalfOpen: true,
		_sockname: null,
		_pendingData: null,
		_pendingEncoding: '',
		server: [Server],
		_server: [Server],
		timeout: 120000,
		parser: [HTTPParser],
		on: [Function: socketListenerWrap],
		addListener: [Function: socketListenerWrap],
		prependListener: [Function: socketListenerWrap],
		_paused: false,
		_httpMessage: [Circular],
		_peername: [Object],
		[Symbol(asyncId)]: 63,
		[Symbol(kHandle)]: [TCP],
		[Symbol(lastWriteQueueSize)]: 0,
		[Symbol(timeout)]: Timeout {
		  _idleTimeout: 120000,
		  _idlePrev: [TimersList],
		  _idleNext: [TimersList],
		  _idleStart: 8575,
		  _onTimeout: [Function: bound ],
		  _timerArgs: undefined,
		  _repeat: null,
		  _destroyed: false,
		  [Symbol(refed)]: false,
		  [Symbol(asyncId)]: 64,
		  [Symbol(triggerId)]: 63
		},
		[Symbol(kBuffer)]: null,
		[Symbol(kBufferCb)]: null,
		[Symbol(kBufferGen)]: null,
		[Symbol(kCapture)]: false,
		[Symbol(kBytesRead)]: 0,
		[Symbol(kBytesWritten)]: 0
	  },
	  connection: Socket {
		connecting: false,
		_hadError: false,
		_parent: null,
		_host: null,
		_readableState: [ReadableState],
		readable: true,
		_events: [Object: null prototype],
		_eventsCount: 8,
		_maxListeners: undefined,
		_writableState: [WritableState],
		writable: true,
		allowHalfOpen: true,
		_sockname: null,
		_pendingData: null,
		_pendingEncoding: '',
		server: [Server],
		_server: [Server],
		timeout: 120000,
		parser: [HTTPParser],
		on: [Function: socketListenerWrap],
		addListener: [Function: socketListenerWrap],
		prependListener: [Function: socketListenerWrap],
		_paused: false,
		_httpMessage: [Circular],
		_peername: [Object],
		[Symbol(asyncId)]: 63,
		[Symbol(kHandle)]: [TCP],
		[Symbol(lastWriteQueueSize)]: 0,
		[Symbol(timeout)]: Timeout {
		  _idleTimeout: 120000,
		  _idlePrev: [TimersList],
		  _idleNext: [TimersList],
		  _idleStart: 8575,
		  _onTimeout: [Function: bound ],
		  _timerArgs: undefined,
		  _repeat: null,
		  _destroyed: false,
		  [Symbol(refed)]: false,
		  [Symbol(asyncId)]: 64,
		  [Symbol(triggerId)]: 63
		},
		[Symbol(kBuffer)]: null,
		[Symbol(kBufferCb)]: null,
		[Symbol(kBufferGen)]: null,
		[Symbol(kCapture)]: false,
		[Symbol(kBytesRead)]: 0,
		[Symbol(kBytesWritten)]: 0
	  },
	  _header: 'HTTP/1.1 401 Unauthorized\r\n' +
		'X-Powered-By: Express\r\n' +
		'Date: Sun, 29 Mar 2020 11:22:02 GMT\r\n' +
		'Connection: keep-alive\r\n' +
		'Content-Length: 12\r\n' +
		'\r\n',
	  _onPendingData: [Function: bound updateOutgoingData],
	  _sent100: false,
	  _expect_continue: false,
	  req: [Circular],
	  locals: [Object: null prototype] {},
	  _startAt: [ 332197, 316901496 ],
	  _startTime: 2020-03-29T11:22:02.256Z,
	  writeHead: [Function: writeHead],
	  __onFinished: [Function: listener] { queue: [Array] },
	  statusCode: 401,
	  statusMessage: 'Unauthorized',
	  [Symbol(kCapture)]: false,
	  [Symbol(kNeedDrain)]: false,
	  [Symbol(corked)]: 0,
	  [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }
	},
	_startAt: [ 332197, 268565230 ],
	_startTime: 2020-03-29T11:22:02.208Z,
	_remoteAddress: '::1',
	body: {},
	secret: undefined,
	cookies: [Object: null prototype] {},
	signedCookies: [Object: null prototype] {},
	_parsedOriginalUrl: Url {
	  protocol: null,
	  slashes: null,
	  auth: null,
	  host: null,
	  port: null,
	  hostname: null,
	  hash: null,
	  search: null,
	  query: null,
	  pathname: '/dishes',
	  path: '/dishes',
	  href: '/dishes',
	  _raw: '/dishes'
	},
	_passport: {
	  instance: Authenticator {
		_key: 'passport',
		_strategies: [Object],
		_serializers: [Array],
		_deserializers: [Array],
		_infoTransformers: [],
		_framework: [Object],
		_userProperty: 'user',
		_sm: [SessionManager],
		Authenticator: [Function: Authenticator],
		Passport: [Function: Authenticator],
		Strategy: [Function],
		strategies: [Object]
	  }
	},
	[Symbol(kCapture)]: false
  }`
